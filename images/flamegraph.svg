<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1398" onload="init(evt)" viewBox="0 0 1200 1398" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1398" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1381.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1381.00"> </text><svg id="frames" x="10" width="1180" total_samples="147"><g><title>send_file`core::ptr::drop_in_place&lt;tokio::runtime::runtime::Runtime&gt; (1 samples, 0.68%)</title><rect x="0.0000%" y="1205" width="0.6803%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1215.50"></text></g><g><title>send_file`core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (1 samples, 0.68%)</title><rect x="0.0000%" y="1189" width="0.6803%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1199.50"></text></g><g><title>send_file`&lt;tokio::runtime::blocking::pool::BlockingPool as core::ops::drop::Drop&gt;::drop (1 samples, 0.68%)</title><rect x="0.0000%" y="1173" width="0.6803%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1183.50"></text></g><g><title>send_file`tokio::runtime::blocking::pool::BlockingPool::shutdown (1 samples, 0.68%)</title><rect x="0.0000%" y="1157" width="0.6803%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1167.50"></text></g><g><title>send_file`alloc::slice::_&lt;impl [T]&gt;::sort_by_key (1 samples, 0.68%)</title><rect x="0.0000%" y="1141" width="0.6803%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1151.50"></text></g><g><title>send_file`alloc::slice::stable_sort (1 samples, 0.68%)</title><rect x="0.0000%" y="1125" width="0.6803%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1135.50"></text></g><g><title>send_file`core::slice::sort::insertion_sort_shift_left (1 samples, 0.68%)</title><rect x="0.0000%" y="1109" width="0.6803%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1119.50"></text></g><g><title>send_file`tokio::runtime::builder::Builder::build (1 samples, 0.68%)</title><rect x="0.6803%" y="1205" width="0.6803%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.9303%" y="1215.50"></text></g><g><title>send_file`tokio::runtime::builder::Builder::build_threaded_runtime (1 samples, 0.68%)</title><rect x="0.6803%" y="1189" width="0.6803%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.9303%" y="1199.50"></text></g><g><title>send_file`tokio::runtime::driver::Driver::new (1 samples, 0.68%)</title><rect x="0.6803%" y="1173" width="0.6803%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.9303%" y="1183.50"></text></g><g><title>send_file`tokio::runtime::driver::create_io_stack (1 samples, 0.68%)</title><rect x="0.6803%" y="1157" width="0.6803%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.9303%" y="1167.50"></text></g><g><title>send_file`tokio::runtime::driver::create_signal_driver (1 samples, 0.68%)</title><rect x="0.6803%" y="1141" width="0.6803%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.9303%" y="1151.50"></text></g><g><title>send_file`tokio::runtime::signal::Driver::new (1 samples, 0.68%)</title><rect x="0.6803%" y="1125" width="0.6803%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.9303%" y="1135.50"></text></g><g><title>send_file`tokio::signal::registry::globals (1 samples, 0.68%)</title><rect x="0.6803%" y="1109" width="0.6803%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.9303%" y="1119.50"></text></g><g><title>send_file`tokio::util::once_cell::OnceCell&lt;T&gt;::get (1 samples, 0.68%)</title><rect x="0.6803%" y="1093" width="0.6803%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.9303%" y="1103.50"></text></g><g><title>send_file`tokio::util::once_cell::OnceCell&lt;T&gt;::do_init (1 samples, 0.68%)</title><rect x="0.6803%" y="1077" width="0.6803%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.9303%" y="1087.50"></text></g><g><title>send_file`std::sync::once::Once::call_once (1 samples, 0.68%)</title><rect x="0.6803%" y="1061" width="0.6803%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="0.9303%" y="1071.50"></text></g><g><title>send_file`std::sys_common::once::queue::Once::call (1 samples, 0.68%)</title><rect x="0.6803%" y="1045" width="0.6803%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="0.9303%" y="1055.50"></text></g><g><title>send_file`std::sync::once::Once::call_once::_{{closure}} (1 samples, 0.68%)</title><rect x="0.6803%" y="1029" width="0.6803%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="0.9303%" y="1039.50"></text></g><g><title>send_file`tokio::util::once_cell::OnceCell&lt;T&gt;::do_init::_{{closure}} (1 samples, 0.68%)</title><rect x="0.6803%" y="1013" width="0.6803%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.9303%" y="1023.50"></text></g><g><title>send_file`core::ops::function::FnOnce::call_once (1 samples, 0.68%)</title><rect x="0.6803%" y="997" width="0.6803%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="0.9303%" y="1007.50"></text></g><g><title>send_file`tokio::signal::registry::globals_init (1 samples, 0.68%)</title><rect x="0.6803%" y="981" width="0.6803%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="0.9303%" y="991.50"></text></g><g><title>send_file`tokio::signal::unix::_&lt;impl tokio::signal::registry::Init for alloc::vec::Vec&lt;tokio::signal::unix::SignalInfo&gt;&gt;::init (1 samples, 0.68%)</title><rect x="0.6803%" y="965" width="0.6803%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="1"/><text x="0.9303%" y="975.50"></text></g><g><title>send_file`core::iter::traits::iterator::Iterator::collect (1 samples, 0.68%)</title><rect x="0.6803%" y="949" width="0.6803%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="1"/><text x="0.9303%" y="959.50"></text></g><g><title>send_file`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.68%)</title><rect x="0.6803%" y="933" width="0.6803%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="1"/><text x="0.9303%" y="943.50"></text></g><g><title>send_file`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.68%)</title><rect x="0.6803%" y="917" width="0.6803%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="1"/><text x="0.9303%" y="927.50"></text></g><g><title>send_file`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.68%)</title><rect x="0.6803%" y="901" width="0.6803%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="1"/><text x="0.9303%" y="911.50"></text></g><g><title>send_file`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.68%)</title><rect x="0.6803%" y="885" width="0.6803%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="1"/><text x="0.9303%" y="895.50"></text></g><g><title>send_file`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.68%)</title><rect x="0.6803%" y="869" width="0.6803%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="1"/><text x="0.9303%" y="879.50"></text></g><g><title>send_file`core::iter::traits::iterator::Iterator::for_each (1 samples, 0.68%)</title><rect x="0.6803%" y="853" width="0.6803%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="1"/><text x="0.9303%" y="863.50"></text></g><g><title>send_file`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.68%)</title><rect x="0.6803%" y="837" width="0.6803%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="1"/><text x="0.9303%" y="847.50"></text></g><g><title>send_file`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (1 samples, 0.68%)</title><rect x="0.6803%" y="821" width="0.6803%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="1"/><text x="0.9303%" y="831.50"></text></g><g><title>send_file`&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (1 samples, 0.68%)</title><rect x="0.6803%" y="805" width="0.6803%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="1"/><text x="0.9303%" y="815.50"></text></g><g><title>send_file`core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (1 samples, 0.68%)</title><rect x="0.6803%" y="789" width="0.6803%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="1"/><text x="0.9303%" y="799.50"></text></g><g><title>send_file`core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.68%)</title><rect x="0.6803%" y="773" width="0.6803%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="1"/><text x="0.9303%" y="783.50"></text></g><g><title>send_file`tokio::signal::unix::_&lt;impl tokio::signal::registry::Init for alloc::vec::Vec&lt;tokio::signal::unix::SignalInfo&gt;&gt;::init::_{{closure}} (1 samples, 0.68%)</title><rect x="0.6803%" y="757" width="0.6803%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="1"/><text x="0.9303%" y="767.50"></text></g><g><title>send_file`&lt;tokio::signal::unix::SignalInfo as core::default::Default&gt;::default (1 samples, 0.68%)</title><rect x="0.6803%" y="741" width="0.6803%" height="15" fill="rgb(226,3,54)" fg:x="1" fg:w="1"/><text x="0.9303%" y="751.50"></text></g><g><title>send_file`&lt;tokio::signal::registry::EventInfo as core::default::Default&gt;::default (1 samples, 0.68%)</title><rect x="0.6803%" y="725" width="0.6803%" height="15" fill="rgb(245,192,40)" fg:x="1" fg:w="1"/><text x="0.9303%" y="735.50"></text></g><g><title>send_file`core::ptr::drop_in_place&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt; (1 samples, 0.68%)</title><rect x="0.6803%" y="709" width="0.6803%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="1"/><text x="0.9303%" y="719.50"></text></g><g><title>send_file`&lt;tokio::sync::watch::Receiver&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.68%)</title><rect x="0.6803%" y="693" width="0.6803%" height="15" fill="rgb(232,182,51)" fg:x="1" fg:w="1"/><text x="0.9303%" y="703.50"></text></g><g><title>send_file`tokio::sync::notify::Notify::notify_waiters (1 samples, 0.68%)</title><rect x="0.6803%" y="677" width="0.6803%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="1"/><text x="0.9303%" y="687.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (1 samples, 0.68%)</title><rect x="1.3605%" y="1061" width="0.6803%" height="15" fill="rgb(208,69,12)" fg:x="2" fg:w="1"/><text x="1.6105%" y="1071.50"></text></g><g><title>send_file`&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (1 samples, 0.68%)</title><rect x="2.0408%" y="1061" width="0.6803%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1"/><text x="2.2908%" y="1071.50"></text></g><g><title>send_file`tokio::time::sleep::Sleep::poll_elapsed (1 samples, 0.68%)</title><rect x="2.0408%" y="1045" width="0.6803%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1"/><text x="2.2908%" y="1055.50"></text></g><g><title>send_file`tokio::runtime::time::entry::TimerEntry::poll_elapsed (1 samples, 0.68%)</title><rect x="2.0408%" y="1029" width="0.6803%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="1"/><text x="2.2908%" y="1039.50"></text></g><g><title>send_file`tokio::runtime::time::entry::TimerEntry::reset (1 samples, 0.68%)</title><rect x="2.0408%" y="1013" width="0.6803%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="1"/><text x="2.2908%" y="1023.50"></text></g><g><title>send_file`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::reregister (1 samples, 0.68%)</title><rect x="2.0408%" y="997" width="0.6803%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="1"/><text x="2.2908%" y="1007.50"></text></g><g><title>send_file`tokio::runtime::driver::IoHandle::unpark (1 samples, 0.68%)</title><rect x="2.0408%" y="981" width="0.6803%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="1"/><text x="2.2908%" y="991.50"></text></g><g><title>send_file`tokio::runtime::io::driver::Handle::unpark (1 samples, 0.68%)</title><rect x="2.0408%" y="965" width="0.6803%" height="15" fill="rgb(239,60,40)" fg:x="3" fg:w="1"/><text x="2.2908%" y="975.50"></text></g><g><title>send_file`mio::waker::Waker::wake (1 samples, 0.68%)</title><rect x="2.0408%" y="949" width="0.6803%" height="15" fill="rgb(206,27,48)" fg:x="3" fg:w="1"/><text x="2.2908%" y="959.50"></text></g><g><title>send_file`mio::sys::unix::waker::kqueue::Waker::wake (1 samples, 0.68%)</title><rect x="2.0408%" y="933" width="0.6803%" height="15" fill="rgb(225,35,8)" fg:x="3" fg:w="1"/><text x="2.2908%" y="943.50"></text></g><g><title>libsystem_kernel.dylib`kevent (1 samples, 0.68%)</title><rect x="2.0408%" y="917" width="0.6803%" height="15" fill="rgb(250,213,24)" fg:x="3" fg:w="1"/><text x="2.2908%" y="927.50"></text></g><g><title>send_file`tokio::runtime::park::CachedParkThread::block_on::_{{closure}} (3 samples, 2.04%)</title><rect x="1.3605%" y="1109" width="2.0408%" height="15" fill="rgb(247,123,22)" fg:x="2" fg:w="3"/><text x="1.6105%" y="1119.50">s..</text></g><g><title>send_file`send_file::main::_{{closure}} (3 samples, 2.04%)</title><rect x="1.3605%" y="1093" width="2.0408%" height="15" fill="rgb(231,138,38)" fg:x="2" fg:w="3"/><text x="1.6105%" y="1103.50">s..</text></g><g><title>send_file`adrnaln::server::Server::serve_new::_{{closure}} (3 samples, 2.04%)</title><rect x="1.3605%" y="1077" width="2.0408%" height="15" fill="rgb(231,145,46)" fg:x="2" fg:w="3"/><text x="1.6105%" y="1087.50">s..</text></g><g><title>send_file`core::ptr::drop_in_place&lt;tokio::runtime::time::entry::TimerEntry&gt; (1 samples, 0.68%)</title><rect x="2.7211%" y="1061" width="0.6803%" height="15" fill="rgb(251,118,11)" fg:x="4" fg:w="1"/><text x="2.9711%" y="1071.50"></text></g><g><title>dyld`start (6 samples, 4.08%)</title><rect x="0.0000%" y="1333" width="4.0816%" height="15" fill="rgb(217,147,25)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1343.50">dyld..</text></g><g><title>send_file`main (6 samples, 4.08%)</title><rect x="0.0000%" y="1317" width="4.0816%" height="15" fill="rgb(247,81,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1327.50">send..</text></g><g><title>send_file`std::rt::lang_start (6 samples, 4.08%)</title><rect x="0.0000%" y="1301" width="4.0816%" height="15" fill="rgb(209,12,38)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1311.50">send..</text></g><g><title>send_file`std::rt::lang_start_internal (6 samples, 4.08%)</title><rect x="0.0000%" y="1285" width="4.0816%" height="15" fill="rgb(227,1,9)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1295.50">send..</text></g><g><title>send_file`std::rt::lang_start::_{{closure}} (6 samples, 4.08%)</title><rect x="0.0000%" y="1269" width="4.0816%" height="15" fill="rgb(248,47,43)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1279.50">send..</text></g><g><title>send_file`std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 4.08%)</title><rect x="0.0000%" y="1253" width="4.0816%" height="15" fill="rgb(221,10,30)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1263.50">send..</text></g><g><title>send_file`core::ops::function::FnOnce::call_once (6 samples, 4.08%)</title><rect x="0.0000%" y="1237" width="4.0816%" height="15" fill="rgb(210,229,1)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1247.50">send..</text></g><g><title>send_file`send_file::main (6 samples, 4.08%)</title><rect x="0.0000%" y="1221" width="4.0816%" height="15" fill="rgb(222,148,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1231.50">send..</text></g><g><title>send_file`tokio::runtime::runtime::Runtime::block_on (4 samples, 2.72%)</title><rect x="1.3605%" y="1205" width="2.7211%" height="15" fill="rgb(234,67,33)" fg:x="2" fg:w="4"/><text x="1.6105%" y="1215.50">se..</text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::MultiThread::block_on (4 samples, 2.72%)</title><rect x="1.3605%" y="1189" width="2.7211%" height="15" fill="rgb(247,98,35)" fg:x="2" fg:w="4"/><text x="1.6105%" y="1199.50">se..</text></g><g><title>send_file`tokio::runtime::context::runtime::enter_runtime (4 samples, 2.72%)</title><rect x="1.3605%" y="1173" width="2.7211%" height="15" fill="rgb(247,138,52)" fg:x="2" fg:w="4"/><text x="1.6105%" y="1183.50">se..</text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::MultiThread::block_on::_{{closure}} (4 samples, 2.72%)</title><rect x="1.3605%" y="1157" width="2.7211%" height="15" fill="rgb(213,79,30)" fg:x="2" fg:w="4"/><text x="1.6105%" y="1167.50">se..</text></g><g><title>send_file`tokio::runtime::context::blocking::BlockingRegionGuard::block_on (4 samples, 2.72%)</title><rect x="1.3605%" y="1141" width="2.7211%" height="15" fill="rgb(246,177,23)" fg:x="2" fg:w="4"/><text x="1.6105%" y="1151.50">se..</text></g><g><title>send_file`tokio::runtime::park::CachedParkThread::block_on (4 samples, 2.72%)</title><rect x="1.3605%" y="1125" width="2.7211%" height="15" fill="rgb(230,62,27)" fg:x="2" fg:w="4"/><text x="1.6105%" y="1135.50">se..</text></g><g><title>send_file`tokio::runtime::park::CachedParkThread::park (1 samples, 0.68%)</title><rect x="3.4014%" y="1109" width="0.6803%" height="15" fill="rgb(216,154,8)" fg:x="5" fg:w="1"/><text x="3.6514%" y="1119.50"></text></g><g><title>send_file`tokio::runtime::park::CachedParkThread::with_current (1 samples, 0.68%)</title><rect x="3.4014%" y="1093" width="0.6803%" height="15" fill="rgb(244,35,45)" fg:x="5" fg:w="1"/><text x="3.6514%" y="1103.50"></text></g><g><title>send_file`std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.68%)</title><rect x="3.4014%" y="1077" width="0.6803%" height="15" fill="rgb(251,115,12)" fg:x="5" fg:w="1"/><text x="3.6514%" y="1087.50"></text></g><g><title>send_file`tokio::runtime::park::CachedParkThread::with_current::_{{closure}} (1 samples, 0.68%)</title><rect x="3.4014%" y="1061" width="0.6803%" height="15" fill="rgb(240,54,50)" fg:x="5" fg:w="1"/><text x="3.6514%" y="1071.50"></text></g><g><title>send_file`tokio::runtime::park::CachedParkThread::park::_{{closure}} (1 samples, 0.68%)</title><rect x="3.4014%" y="1045" width="0.6803%" height="15" fill="rgb(233,84,52)" fg:x="5" fg:w="1"/><text x="3.6514%" y="1055.50"></text></g><g><title>send_file`tokio::runtime::park::Inner::park (1 samples, 0.68%)</title><rect x="3.4014%" y="1029" width="0.6803%" height="15" fill="rgb(207,117,47)" fg:x="5" fg:w="1"/><text x="3.6514%" y="1039.50"></text></g><g><title>send_file`tokio::loom::std::parking_lot::Condvar::wait (1 samples, 0.68%)</title><rect x="3.4014%" y="1013" width="0.6803%" height="15" fill="rgb(249,43,39)" fg:x="5" fg:w="1"/><text x="3.6514%" y="1023.50"></text></g><g><title>send_file`parking_lot::condvar::Condvar::wait (1 samples, 0.68%)</title><rect x="3.4014%" y="997" width="0.6803%" height="15" fill="rgb(209,38,44)" fg:x="5" fg:w="1"/><text x="3.6514%" y="1007.50"></text></g><g><title>send_file`parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.68%)</title><rect x="3.4014%" y="981" width="0.6803%" height="15" fill="rgb(236,212,23)" fg:x="5" fg:w="1"/><text x="3.6514%" y="991.50"></text></g><g><title>send_file`parking_lot_core::parking_lot::park (1 samples, 0.68%)</title><rect x="3.4014%" y="965" width="0.6803%" height="15" fill="rgb(242,79,21)" fg:x="5" fg:w="1"/><text x="3.6514%" y="975.50"></text></g><g><title>send_file`parking_lot_core::parking_lot::park::_{{closure}} (1 samples, 0.68%)</title><rect x="3.4014%" y="949" width="0.6803%" height="15" fill="rgb(211,96,35)" fg:x="5" fg:w="1"/><text x="3.6514%" y="959.50"></text></g><g><title>send_file`&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (1 samples, 0.68%)</title><rect x="3.4014%" y="933" width="0.6803%" height="15" fill="rgb(253,215,40)" fg:x="5" fg:w="1"/><text x="3.6514%" y="943.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.68%)</title><rect x="3.4014%" y="917" width="0.6803%" height="15" fill="rgb(211,81,21)" fg:x="5" fg:w="1"/><text x="3.6514%" y="927.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.68%)</title><rect x="4.0816%" y="1333" width="0.6803%" height="15" fill="rgb(208,190,38)" fg:x="6" fg:w="1"/><text x="4.3316%" y="1343.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.68%)</title><rect x="4.7619%" y="1285" width="0.6803%" height="15" fill="rgb(235,213,38)" fg:x="7" fg:w="1"/><text x="5.0119%" y="1295.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (1 samples, 0.68%)</title><rect x="5.4422%" y="1285" width="0.6803%" height="15" fill="rgb(237,122,38)" fg:x="8" fg:w="1"/><text x="5.6922%" y="1295.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (1 samples, 0.68%)</title><rect x="5.4422%" y="1269" width="0.6803%" height="15" fill="rgb(244,218,35)" fg:x="8" fg:w="1"/><text x="5.6922%" y="1279.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (4 samples, 2.72%)</title><rect x="4.7619%" y="1301" width="2.7211%" height="15" fill="rgb(240,68,47)" fg:x="7" fg:w="4"/><text x="5.0119%" y="1311.50">li..</text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (2 samples, 1.36%)</title><rect x="6.1224%" y="1285" width="1.3605%" height="15" fill="rgb(210,16,53)" fg:x="9" fg:w="2"/><text x="6.3724%" y="1295.50"></text></g><g><title>libsystem_kernel.dylib`close (1 samples, 0.68%)</title><rect x="7.4830%" y="837" width="0.6803%" height="15" fill="rgb(235,124,12)" fg:x="11" fg:w="1"/><text x="7.7330%" y="847.50"></text></g><g><title>send_file`tokio::fs::write::write::_{{closure}}::_{{closure}} (2 samples, 1.36%)</title><rect x="7.4830%" y="869" width="1.3605%" height="15" fill="rgb(224,169,11)" fg:x="11" fg:w="2"/><text x="7.7330%" y="879.50"></text></g><g><title>send_file`std::fs::write (2 samples, 1.36%)</title><rect x="7.4830%" y="853" width="1.3605%" height="15" fill="rgb(250,166,2)" fg:x="11" fg:w="2"/><text x="7.7330%" y="863.50"></text></g><g><title>send_file`std::fs::write::inner (1 samples, 0.68%)</title><rect x="8.1633%" y="837" width="0.6803%" height="15" fill="rgb(242,216,29)" fg:x="12" fg:w="1"/><text x="8.4133%" y="847.50"></text></g><g><title>send_file`std::sys::unix::fs::File::open_c (1 samples, 0.68%)</title><rect x="8.1633%" y="821" width="0.6803%" height="15" fill="rgb(230,116,27)" fg:x="12" fg:w="1"/><text x="8.4133%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.68%)</title><rect x="8.1633%" y="805" width="0.6803%" height="15" fill="rgb(228,99,48)" fg:x="12" fg:w="1"/><text x="8.4133%" y="815.50"></text></g><g><title>send_file`tokio::runtime::scheduler::defer::Defer::wake (1 samples, 0.68%)</title><rect x="8.8435%" y="677" width="0.6803%" height="15" fill="rgb(253,11,6)" fg:x="13" fg:w="1"/><text x="9.0935%" y="687.50"></text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (1 samples, 0.68%)</title><rect x="9.5238%" y="629" width="0.6803%" height="15" fill="rgb(247,143,39)" fg:x="14" fg:w="1"/><text x="9.7738%" y="639.50"></text></g><g><title>send_file`lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.68%)</title><rect x="9.5238%" y="613" width="0.6803%" height="15" fill="rgb(236,97,10)" fg:x="14" fg:w="1"/><text x="9.7738%" y="623.50"></text></g><g><title>send_file`tokio::runtime::driver::IoStack::park (1 samples, 0.68%)</title><rect x="10.2041%" y="549" width="0.6803%" height="15" fill="rgb(233,208,19)" fg:x="15" fg:w="1"/><text x="10.4541%" y="559.50"></text></g><g><title>send_file`tokio::runtime::process::Driver::park (1 samples, 0.68%)</title><rect x="10.2041%" y="533" width="0.6803%" height="15" fill="rgb(216,164,2)" fg:x="15" fg:w="1"/><text x="10.4541%" y="543.50"></text></g><g><title>send_file`tokio::runtime::signal::Driver::park (1 samples, 0.68%)</title><rect x="10.2041%" y="517" width="0.6803%" height="15" fill="rgb(220,129,5)" fg:x="15" fg:w="1"/><text x="10.4541%" y="527.50"></text></g><g><title>send_file`tokio::runtime::io::driver::Driver::park (1 samples, 0.68%)</title><rect x="10.2041%" y="501" width="0.6803%" height="15" fill="rgb(242,17,10)" fg:x="15" fg:w="1"/><text x="10.4541%" y="511.50"></text></g><g><title>send_file`tokio::runtime::io::driver::Driver::turn (1 samples, 0.68%)</title><rect x="10.2041%" y="485" width="0.6803%" height="15" fill="rgb(242,107,0)" fg:x="15" fg:w="1"/><text x="10.4541%" y="495.50"></text></g><g><title>send_file`mio::poll::Poll::poll (1 samples, 0.68%)</title><rect x="10.2041%" y="469" width="0.6803%" height="15" fill="rgb(251,28,31)" fg:x="15" fg:w="1"/><text x="10.4541%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`kevent (1 samples, 0.68%)</title><rect x="10.2041%" y="453" width="0.6803%" height="15" fill="rgb(233,223,10)" fg:x="15" fg:w="1"/><text x="10.4541%" y="463.50"></text></g><g><title>send_file`tokio::process::imp::GlobalOrphanQueue::reap_orphans (2 samples, 1.36%)</title><rect x="10.8844%" y="501" width="1.3605%" height="15" fill="rgb(215,21,27)" fg:x="16" fg:w="2"/><text x="11.1344%" y="511.50"></text></g><g><title>send_file`tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (2 samples, 1.36%)</title><rect x="10.8844%" y="485" width="1.3605%" height="15" fill="rgb(232,23,21)" fg:x="16" fg:w="2"/><text x="11.1344%" y="495.50"></text></g><g><title>send_file`core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;core::option::Option&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt;&gt;&gt; (1 samples, 0.68%)</title><rect x="11.5646%" y="469" width="0.6803%" height="15" fill="rgb(244,5,23)" fg:x="17" fg:w="1"/><text x="11.8146%" y="479.50"></text></g><g><title>send_file`core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,core::option::Option&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt;&gt;&gt; (1 samples, 0.68%)</title><rect x="11.5646%" y="453" width="0.6803%" height="15" fill="rgb(226,81,46)" fg:x="17" fg:w="1"/><text x="11.8146%" y="463.50"></text></g><g><title>send_file`&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.68%)</title><rect x="11.5646%" y="437" width="0.6803%" height="15" fill="rgb(247,70,30)" fg:x="17" fg:w="1"/><text x="11.8146%" y="447.50"></text></g><g><title>send_file`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.68%)</title><rect x="11.5646%" y="421" width="0.6803%" height="15" fill="rgb(212,68,19)" fg:x="17" fg:w="1"/><text x="11.8146%" y="431.50"></text></g><g><title>send_file`tokio::runtime::time::Driver::park_thread_timeout (6 samples, 4.08%)</title><rect x="10.8844%" y="549" width="4.0816%" height="15" fill="rgb(240,187,13)" fg:x="16" fg:w="6"/><text x="11.1344%" y="559.50">send..</text></g><g><title>send_file`tokio::runtime::driver::IoStack::park_timeout (6 samples, 4.08%)</title><rect x="10.8844%" y="533" width="4.0816%" height="15" fill="rgb(223,113,26)" fg:x="16" fg:w="6"/><text x="11.1344%" y="543.50">send..</text></g><g><title>send_file`tokio::runtime::process::Driver::park_timeout (6 samples, 4.08%)</title><rect x="10.8844%" y="517" width="4.0816%" height="15" fill="rgb(206,192,2)" fg:x="16" fg:w="6"/><text x="11.1344%" y="527.50">send..</text></g><g><title>send_file`tokio::runtime::signal::Driver::park_timeout (4 samples, 2.72%)</title><rect x="12.2449%" y="501" width="2.7211%" height="15" fill="rgb(241,108,4)" fg:x="18" fg:w="4"/><text x="12.4949%" y="511.50">se..</text></g><g><title>send_file`tokio::runtime::io::driver::Driver::park_timeout (4 samples, 2.72%)</title><rect x="12.2449%" y="485" width="2.7211%" height="15" fill="rgb(247,173,49)" fg:x="18" fg:w="4"/><text x="12.4949%" y="495.50">se..</text></g><g><title>send_file`tokio::runtime::io::driver::Driver::turn (4 samples, 2.72%)</title><rect x="12.2449%" y="469" width="2.7211%" height="15" fill="rgb(224,114,35)" fg:x="18" fg:w="4"/><text x="12.4949%" y="479.50">se..</text></g><g><title>send_file`mio::poll::Poll::poll (3 samples, 2.04%)</title><rect x="12.9252%" y="453" width="2.0408%" height="15" fill="rgb(245,159,27)" fg:x="19" fg:w="3"/><text x="13.1752%" y="463.50">s..</text></g><g><title>libsystem_kernel.dylib`kevent (3 samples, 2.04%)</title><rect x="12.9252%" y="437" width="2.0408%" height="15" fill="rgb(245,172,44)" fg:x="19" fg:w="3"/><text x="13.1752%" y="447.50">l..</text></g><g><title>send_file`core::task::wake::Waker::wake (1 samples, 0.68%)</title><rect x="14.9660%" y="517" width="0.6803%" height="15" fill="rgb(236,23,11)" fg:x="22" fg:w="1"/><text x="15.2160%" y="527.50"></text></g><g><title>send_file`tokio::runtime::park::wake (1 samples, 0.68%)</title><rect x="14.9660%" y="501" width="0.6803%" height="15" fill="rgb(205,117,38)" fg:x="22" fg:w="1"/><text x="15.2160%" y="511.50"></text></g><g><title>send_file`tokio::runtime::park::Inner::unpark (1 samples, 0.68%)</title><rect x="14.9660%" y="485" width="0.6803%" height="15" fill="rgb(237,72,25)" fg:x="22" fg:w="1"/><text x="15.2160%" y="495.50"></text></g><g><title>send_file`tokio::loom::std::parking_lot::Condvar::notify_one (1 samples, 0.68%)</title><rect x="14.9660%" y="469" width="0.6803%" height="15" fill="rgb(244,70,9)" fg:x="22" fg:w="1"/><text x="15.2160%" y="479.50"></text></g><g><title>send_file`parking_lot::condvar::Condvar::notify_one (1 samples, 0.68%)</title><rect x="14.9660%" y="453" width="0.6803%" height="15" fill="rgb(217,125,39)" fg:x="22" fg:w="1"/><text x="15.2160%" y="463.50"></text></g><g><title>send_file`parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.68%)</title><rect x="14.9660%" y="437" width="0.6803%" height="15" fill="rgb(235,36,10)" fg:x="22" fg:w="1"/><text x="15.2160%" y="447.50"></text></g><g><title>send_file`parking_lot_core::parking_lot::unpark_requeue (1 samples, 0.68%)</title><rect x="14.9660%" y="421" width="0.6803%" height="15" fill="rgb(251,123,47)" fg:x="22" fg:w="1"/><text x="15.2160%" y="431.50"></text></g><g><title>send_file`core::ops::function::FnOnce::call_once (1 samples, 0.68%)</title><rect x="14.9660%" y="405" width="0.6803%" height="15" fill="rgb(221,13,13)" fg:x="22" fg:w="1"/><text x="15.2160%" y="415.50"></text></g><g><title>send_file`parking_lot::condvar::Condvar::notify_one_slow::_{{closure}} (1 samples, 0.68%)</title><rect x="14.9660%" y="389" width="0.6803%" height="15" fill="rgb(238,131,9)" fg:x="22" fg:w="1"/><text x="15.2160%" y="399.50"></text></g><g><title>send_file`parking_lot::raw_mutex::RawMutex::mark_parked_if_locked (1 samples, 0.68%)</title><rect x="14.9660%" y="373" width="0.6803%" height="15" fill="rgb(211,50,8)" fg:x="22" fg:w="1"/><text x="15.2160%" y="383.50"></text></g><g><title>send_file`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (2 samples, 1.36%)</title><rect x="14.9660%" y="533" width="1.3605%" height="15" fill="rgb(245,182,24)" fg:x="22" fg:w="2"/><text x="15.2160%" y="543.50"></text></g><g><title>send_file`tokio::runtime::time::wheel::Wheel::poll (1 samples, 0.68%)</title><rect x="15.6463%" y="517" width="0.6803%" height="15" fill="rgb(242,14,37)" fg:x="23" fg:w="1"/><text x="15.8963%" y="527.50"></text></g><g><title>send_file`tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.68%)</title><rect x="15.6463%" y="501" width="0.6803%" height="15" fill="rgb(246,228,12)" fg:x="23" fg:w="1"/><text x="15.8963%" y="511.50"></text></g><g><title>send_file`tokio::runtime::time::wheel::Wheel::no_expirations_before (1 samples, 0.68%)</title><rect x="15.6463%" y="485" width="0.6803%" height="15" fill="rgb(213,55,15)" fg:x="23" fg:w="1"/><text x="15.8963%" y="495.50"></text></g><g><title>send_file`tokio::runtime::time::wheel::level::Level::next_expiration (1 samples, 0.68%)</title><rect x="15.6463%" y="469" width="0.6803%" height="15" fill="rgb(209,9,3)" fg:x="23" fg:w="1"/><text x="15.8963%" y="479.50"></text></g><g><title>send_file`tokio::runtime::time::wheel::level::level_range (1 samples, 0.68%)</title><rect x="15.6463%" y="453" width="0.6803%" height="15" fill="rgb(230,59,30)" fg:x="23" fg:w="1"/><text x="15.8963%" y="463.50"></text></g><g><title>send_file`tokio::runtime::time::wheel::level::slot_range (1 samples, 0.68%)</title><rect x="15.6463%" y="437" width="0.6803%" height="15" fill="rgb(209,121,21)" fg:x="23" fg:w="1"/><text x="15.8963%" y="447.50"></text></g><g><title>send_file`core::num::_&lt;impl usize&gt;::pow (1 samples, 0.68%)</title><rect x="15.6463%" y="421" width="0.6803%" height="15" fill="rgb(220,109,13)" fg:x="23" fg:w="1"/><text x="15.8963%" y="431.50"></text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (11 samples, 7.48%)</title><rect x="9.5238%" y="677" width="7.4830%" height="15" fill="rgb(232,18,1)" fg:x="14" fg:w="11"/><text x="9.7738%" y="687.50">send_file`..</text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::park::Parker::park (11 samples, 7.48%)</title><rect x="9.5238%" y="661" width="7.4830%" height="15" fill="rgb(215,41,42)" fg:x="14" fg:w="11"/><text x="9.7738%" y="671.50">send_file`..</text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::park::Inner::park (11 samples, 7.48%)</title><rect x="9.5238%" y="645" width="7.4830%" height="15" fill="rgb(224,123,36)" fg:x="14" fg:w="11"/><text x="9.7738%" y="655.50">send_file`..</text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (10 samples, 6.80%)</title><rect x="10.2041%" y="629" width="6.8027%" height="15" fill="rgb(240,125,3)" fg:x="15" fg:w="10"/><text x="10.4541%" y="639.50">send_file..</text></g><g><title>send_file`tokio::runtime::driver::Driver::park (10 samples, 6.80%)</title><rect x="10.2041%" y="613" width="6.8027%" height="15" fill="rgb(205,98,50)" fg:x="15" fg:w="10"/><text x="10.4541%" y="623.50">send_file..</text></g><g><title>send_file`tokio::runtime::driver::TimeDriver::park (10 samples, 6.80%)</title><rect x="10.2041%" y="597" width="6.8027%" height="15" fill="rgb(205,185,37)" fg:x="15" fg:w="10"/><text x="10.4541%" y="607.50">send_file..</text></g><g><title>send_file`tokio::runtime::time::Driver::park (10 samples, 6.80%)</title><rect x="10.2041%" y="581" width="6.8027%" height="15" fill="rgb(238,207,15)" fg:x="15" fg:w="10"/><text x="10.4541%" y="591.50">send_file..</text></g><g><title>send_file`tokio::runtime::time::Driver::park_internal (10 samples, 6.80%)</title><rect x="10.2041%" y="565" width="6.8027%" height="15" fill="rgb(213,199,42)" fg:x="15" fg:w="10"/><text x="10.4541%" y="575.50">send_file..</text></g><g><title>send_file`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process (3 samples, 2.04%)</title><rect x="14.9660%" y="549" width="2.0408%" height="15" fill="rgb(235,201,11)" fg:x="22" fg:w="3"/><text x="15.2160%" y="559.50">s..</text></g><g><title>send_file`tokio::runtime::time::source::TimeSource::now (1 samples, 0.68%)</title><rect x="16.3265%" y="533" width="0.6803%" height="15" fill="rgb(207,46,11)" fg:x="24" fg:w="1"/><text x="16.5765%" y="543.50"></text></g><g><title>send_file`tokio::time::clock::Clock::now (1 samples, 0.68%)</title><rect x="16.3265%" y="517" width="0.6803%" height="15" fill="rgb(241,35,35)" fg:x="24" fg:w="1"/><text x="16.5765%" y="527.50"></text></g><g><title>send_file`tokio::time::clock::now (1 samples, 0.68%)</title><rect x="16.3265%" y="501" width="0.6803%" height="15" fill="rgb(243,32,47)" fg:x="24" fg:w="1"/><text x="16.5765%" y="511.50"></text></g><g><title>send_file`std::sys::unix::time::Timespec::now (1 samples, 0.68%)</title><rect x="16.3265%" y="485" width="0.6803%" height="15" fill="rgb(247,202,23)" fg:x="24" fg:w="1"/><text x="16.5765%" y="495.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (1 samples, 0.68%)</title><rect x="16.3265%" y="469" width="0.6803%" height="15" fill="rgb(219,102,11)" fg:x="24" fg:w="1"/><text x="16.5765%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.68%)</title><rect x="16.3265%" y="453" width="0.6803%" height="15" fill="rgb(243,110,44)" fg:x="24" fg:w="1"/><text x="16.5765%" y="463.50"></text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::worker::Context::park (13 samples, 8.84%)</title><rect x="8.8435%" y="693" width="8.8435%" height="15" fill="rgb(222,74,54)" fg:x="13" fg:w="13"/><text x="9.0935%" y="703.50">send_file`to..</text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::worker::Core::maintenance (1 samples, 0.68%)</title><rect x="17.0068%" y="677" width="0.6803%" height="15" fill="rgb(216,99,12)" fg:x="25" fg:w="1"/><text x="17.2568%" y="687.50"></text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1 samples, 0.68%)</title><rect x="17.6871%" y="693" width="0.6803%" height="15" fill="rgb(226,22,26)" fg:x="26" fg:w="1"/><text x="17.9371%" y="703.50"></text></g><g><title>send_file`alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.68%)</title><rect x="23.1293%" y="149" width="0.6803%" height="15" fill="rgb(217,163,10)" fg:x="34" fg:w="1"/><text x="23.3793%" y="159.50"></text></g><g><title>send_file`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (8 samples, 5.44%)</title><rect x="33.3333%" y="69" width="5.4422%" height="15" fill="rgb(213,25,53)" fg:x="49" fg:w="8"/><text x="33.5833%" y="79.50">send_fi..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 1.36%)</title><rect x="47.6190%" y="37" width="1.3605%" height="15" fill="rgb(252,105,26)" fg:x="70" fg:w="2"/><text x="47.8690%" y="47.50"></text></g><g><title>send_file`core::result::Result&lt;T,E&gt;::map (6 samples, 4.08%)</title><rect x="48.9796%" y="37" width="4.0816%" height="15" fill="rgb(220,39,43)" fg:x="72" fg:w="6"/><text x="49.2296%" y="47.50">send..</text></g><g><title>send_file`core::slice::_&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.68%)</title><rect x="53.0612%" y="37" width="0.6803%" height="15" fill="rgb(229,68,48)" fg:x="78" fg:w="1"/><text x="53.3112%" y="47.50"></text></g><g><title>send_file`bincode::byteorder::ReadBytesExt::read_u8 (25 samples, 17.01%)</title><rect x="40.8163%" y="53" width="17.0068%" height="15" fill="rgb(252,8,32)" fg:x="60" fg:w="25"/><text x="41.0663%" y="63.50">send_file`bincode::byteord..</text></g><g><title>send_file`core::slice::_&lt;impl [T]&gt;::split_at (6 samples, 4.08%)</title><rect x="53.7415%" y="37" width="4.0816%" height="15" fill="rgb(223,20,43)" fg:x="79" fg:w="6"/><text x="53.9915%" y="47.50">send..</text></g><g><title>send_file`bincode::de::Deserializer&lt;R,O&gt;::read_literal_type (2 samples, 1.36%)</title><rect x="57.8231%" y="53" width="1.3605%" height="15" fill="rgb(229,81,49)" fg:x="85" fg:w="2"/><text x="58.0731%" y="63.50"></text></g><g><title>send_file`bincode::de::Deserializer&lt;R,O&gt;::read_bytes (2 samples, 1.36%)</title><rect x="57.8231%" y="37" width="1.3605%" height="15" fill="rgb(236,28,36)" fg:x="85" fg:w="2"/><text x="58.0731%" y="47.50"></text></g><g><title>send_file`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u8 (42 samples, 28.57%)</title><rect x="31.9728%" y="85" width="28.5714%" height="15" fill="rgb(249,185,26)" fg:x="47" fg:w="42"/><text x="32.2228%" y="95.50">send_file`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt;..</text></g><g><title>send_file`bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (32 samples, 21.77%)</title><rect x="38.7755%" y="69" width="21.7687%" height="15" fill="rgb(249,174,33)" fg:x="57" fg:w="32"/><text x="39.0255%" y="79.50">send_file`bincode::de::Deserialize..</text></g><g><title>send_file`core::result::Result&lt;T,E&gt;::map_err (2 samples, 1.36%)</title><rect x="59.1837%" y="53" width="1.3605%" height="15" fill="rgb(233,201,37)" fg:x="87" fg:w="2"/><text x="59.4337%" y="63.50"></text></g><g><title>send_file`&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (57 samples, 38.78%)</title><rect x="24.4898%" y="133" width="38.7755%" height="15" fill="rgb(221,78,26)" fg:x="36" fg:w="57"/><text x="24.7398%" y="143.50">send_file`&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::D..</text></g><g><title>send_file`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (47 samples, 31.97%)</title><rect x="31.2925%" y="117" width="31.9728%" height="15" fill="rgb(250,127,30)" fg:x="46" fg:w="47"/><text x="31.5425%" y="127.50">send_file`&lt;core::marker::PhantomData&lt;T&gt; as serde::de..</text></g><g><title>send_file`serde::de::impls::_&lt;impl serde::de::Deserialize for u8&gt;::deserialize (46 samples, 31.29%)</title><rect x="31.9728%" y="101" width="31.2925%" height="15" fill="rgb(230,49,44)" fg:x="47" fg:w="46"/><text x="32.2228%" y="111.50">send_file`serde::de::impls::_&lt;impl serde::de::Deser..</text></g><g><title>send_file`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 2.72%)</title><rect x="60.5442%" y="85" width="2.7211%" height="15" fill="rgb(229,67,23)" fg:x="89" fg:w="4"/><text x="60.7942%" y="95.50">se..</text></g><g><title>send_file`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (67 samples, 45.58%)</title><rect x="18.3673%" y="437" width="45.5782%" height="15" fill="rgb(249,83,47)" fg:x="27" fg:w="67"/><text x="18.6173%" y="447.50">send_file`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>send_file`adrnaln::server::Server::serve_new::_{{closure}}::_{{closure}} (67 samples, 45.58%)</title><rect x="18.3673%" y="421" width="45.5782%" height="15" fill="rgb(215,43,3)" fg:x="27" fg:w="67"/><text x="18.6173%" y="431.50">send_file`adrnaln::server::Server::serve_new::_{{closure}}::_{{closure}}</text></g><g><title>send_file`adrnaln::packet::Packet::from_bytes (67 samples, 45.58%)</title><rect x="18.3673%" y="405" width="45.5782%" height="15" fill="rgb(238,154,13)" fg:x="27" fg:w="67"/><text x="18.6173%" y="415.50">send_file`adrnaln::packet::Packet::from_bytes</text></g><g><title>send_file`bincode::deserialize (67 samples, 45.58%)</title><rect x="18.3673%" y="389" width="45.5782%" height="15" fill="rgb(219,56,2)" fg:x="27" fg:w="67"/><text x="18.6173%" y="399.50">send_file`bincode::deserialize</text></g><g><title>send_file`bincode::internal::deserialize (67 samples, 45.58%)</title><rect x="18.3673%" y="373" width="45.5782%" height="15" fill="rgb(233,0,4)" fg:x="27" fg:w="67"/><text x="18.6173%" y="383.50">send_file`bincode::internal::deserialize</text></g><g><title>send_file`bincode::internal::deserialize_seed (67 samples, 45.58%)</title><rect x="18.3673%" y="357" width="45.5782%" height="15" fill="rgb(235,30,7)" fg:x="27" fg:w="67"/><text x="18.6173%" y="367.50">send_file`bincode::internal::deserialize_seed</text></g><g><title>send_file`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (67 samples, 45.58%)</title><rect x="18.3673%" y="341" width="45.5782%" height="15" fill="rgb(250,79,13)" fg:x="27" fg:w="67"/><text x="18.6173%" y="351.50">send_file`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::des..</text></g><g><title>send_file`adrnaln::packet::_::_&lt;impl serde::de::Deserialize for adrnaln::packet::Packet&gt;::deserialize (67 samples, 45.58%)</title><rect x="18.3673%" y="325" width="45.5782%" height="15" fill="rgb(211,146,34)" fg:x="27" fg:w="67"/><text x="18.6173%" y="335.50">send_file`adrnaln::packet::_::_&lt;impl serde::de::Deserialize for adrnaln::pa..</text></g><g><title>send_file`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (67 samples, 45.58%)</title><rect x="18.3673%" y="309" width="45.5782%" height="15" fill="rgb(228,22,38)" fg:x="27" fg:w="67"/><text x="18.6173%" y="319.50">send_file`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;:..</text></g><g><title>send_file`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (67 samples, 45.58%)</title><rect x="18.3673%" y="293" width="45.5782%" height="15" fill="rgb(235,168,5)" fg:x="27" fg:w="67"/><text x="18.6173%" y="303.50">send_file`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;:..</text></g><g><title>send_file`&lt;adrnaln::packet::_::&lt;impl serde::de::Deserialize for adrnaln::packet::Packet&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (67 samples, 45.58%)</title><rect x="18.3673%" y="277" width="45.5782%" height="15" fill="rgb(221,155,16)" fg:x="27" fg:w="67"/><text x="18.6173%" y="287.50">send_file`&lt;adrnaln::packet::_::&lt;impl serde::de::Deserialize for adrnaln::pa..</text></g><g><title>send_file`serde::de::SeqAccess::next_element (66 samples, 44.90%)</title><rect x="19.0476%" y="261" width="44.8980%" height="15" fill="rgb(215,215,53)" fg:x="28" fg:w="66"/><text x="19.2976%" y="271.50">send_file`serde::de::SeqAccess::next_element</text></g><g><title>send_file`&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (66 samples, 44.90%)</title><rect x="19.0476%" y="245" width="44.8980%" height="15" fill="rgb(223,4,10)" fg:x="28" fg:w="66"/><text x="19.2976%" y="255.50">send_file`&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer..</text></g><g><title>send_file`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (66 samples, 44.90%)</title><rect x="19.0476%" y="229" width="44.8980%" height="15" fill="rgb(234,103,6)" fg:x="28" fg:w="66"/><text x="19.2976%" y="239.50">send_file`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::de..</text></g><g><title>send_file`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (66 samples, 44.90%)</title><rect x="19.0476%" y="213" width="44.8980%" height="15" fill="rgb(227,97,0)" fg:x="28" fg:w="66"/><text x="19.2976%" y="223.50">send_file`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::vec::..</text></g><g><title>send_file`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (66 samples, 44.90%)</title><rect x="19.0476%" y="197" width="44.8980%" height="15" fill="rgb(234,150,53)" fg:x="28" fg:w="66"/><text x="19.2976%" y="207.50">send_file`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;..</text></g><g><title>send_file`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (66 samples, 44.90%)</title><rect x="19.0476%" y="181" width="44.8980%" height="15" fill="rgb(228,201,54)" fg:x="28" fg:w="66"/><text x="19.2976%" y="191.50">send_file`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;..</text></g><g><title>send_file`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (66 samples, 44.90%)</title><rect x="19.0476%" y="165" width="44.8980%" height="15" fill="rgb(222,22,37)" fg:x="28" fg:w="66"/><text x="19.2976%" y="175.50">send_file`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::..</text></g><g><title>send_file`serde::de::SeqAccess::next_element (59 samples, 40.14%)</title><rect x="23.8095%" y="149" width="40.1361%" height="15" fill="rgb(237,53,32)" fg:x="35" fg:w="59"/><text x="24.0595%" y="159.50">send_file`serde::de::SeqAccess::next_element</text></g><g><title>send_file`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.68%)</title><rect x="63.2653%" y="133" width="0.6803%" height="15" fill="rgb(233,25,53)" fg:x="93" fg:w="1"/><text x="63.5153%" y="143.50"></text></g><g><title>send_file`&lt;adrnaln::packet::Packet as core::clone::Clone&gt;::clone (1 samples, 0.68%)</title><rect x="63.9456%" y="421" width="0.6803%" height="15" fill="rgb(210,40,34)" fg:x="94" fg:w="1"/><text x="64.1956%" y="431.50"></text></g><g><title>send_file`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.68%)</title><rect x="63.9456%" y="405" width="0.6803%" height="15" fill="rgb(241,220,44)" fg:x="94" fg:w="1"/><text x="64.1956%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.68%)</title><rect x="63.9456%" y="389" width="0.6803%" height="15" fill="rgb(235,28,35)" fg:x="94" fg:w="1"/><text x="64.1956%" y="399.50"></text></g><g><title>send_file`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 4.08%)</title><rect x="64.6259%" y="245" width="4.0816%" height="15" fill="rgb(210,56,17)" fg:x="95" fg:w="6"/><text x="64.8759%" y="255.50">send..</text></g><g><title>send_file`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.68%)</title><rect x="72.7891%" y="69" width="0.6803%" height="15" fill="rgb(224,130,29)" fg:x="107" fg:w="1"/><text x="73.0391%" y="79.50"></text></g><g><title>send_file`bincode::byteorder::WriteBytesExt::write_u8 (8 samples, 5.44%)</title><rect x="72.1088%" y="117" width="5.4422%" height="15" fill="rgb(235,212,8)" fg:x="106" fg:w="8"/><text x="72.3588%" y="127.50">send_fi..</text></g><g><title>send_file`std::io::impls::_&lt;impl std::io::Write for &amp;mut W&gt;::write_all (7 samples, 4.76%)</title><rect x="72.7891%" y="101" width="4.7619%" height="15" fill="rgb(223,33,50)" fg:x="107" fg:w="7"/><text x="73.0391%" y="111.50">send_f..</text></g><g><title>send_file`std::io::impls::_&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (7 samples, 4.76%)</title><rect x="72.7891%" y="85" width="4.7619%" height="15" fill="rgb(219,149,13)" fg:x="107" fg:w="7"/><text x="73.0391%" y="95.50">send_f..</text></g><g><title>send_file`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6 samples, 4.08%)</title><rect x="73.4694%" y="69" width="4.0816%" height="15" fill="rgb(250,156,29)" fg:x="108" fg:w="6"/><text x="73.7194%" y="79.50">send..</text></g><g><title>send_file`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 2.04%)</title><rect x="75.5102%" y="53" width="2.0408%" height="15" fill="rgb(216,193,19)" fg:x="111" fg:w="3"/><text x="75.7602%" y="63.50">s..</text></g><g><title>send_file`bincode::internal::serialize_into (20 samples, 13.61%)</title><rect x="64.6259%" y="341" width="13.6054%" height="15" fill="rgb(216,135,14)" fg:x="95" fg:w="20"/><text x="64.8759%" y="351.50">send_file`bincode::in..</text></g><g><title>send_file`adrnaln::packet::_::_&lt;impl serde::ser::Serialize for adrnaln::packet::Packet&gt;::serialize (20 samples, 13.61%)</title><rect x="64.6259%" y="325" width="13.6054%" height="15" fill="rgb(241,47,5)" fg:x="95" fg:w="20"/><text x="64.8759%" y="335.50">send_file`adrnaln::pa..</text></g><g><title>send_file`&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (20 samples, 13.61%)</title><rect x="64.6259%" y="309" width="13.6054%" height="15" fill="rgb(233,42,35)" fg:x="95" fg:w="20"/><text x="64.8759%" y="319.50">send_file`&lt;bincode::s..</text></g><g><title>send_file`serde::ser::impls::_&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (20 samples, 13.61%)</title><rect x="64.6259%" y="293" width="13.6054%" height="15" fill="rgb(231,13,6)" fg:x="95" fg:w="20"/><text x="64.8759%" y="303.50">send_file`serde::ser:..</text></g><g><title>send_file`serde::ser::Serializer::collect_seq (20 samples, 13.61%)</title><rect x="64.6259%" y="277" width="13.6054%" height="15" fill="rgb(207,181,40)" fg:x="95" fg:w="20"/><text x="64.8759%" y="287.50">send_file`serde::ser:..</text></g><g><title>send_file`core::iter::traits::iterator::Iterator::try_for_each (20 samples, 13.61%)</title><rect x="64.6259%" y="261" width="13.6054%" height="15" fill="rgb(254,173,49)" fg:x="95" fg:w="20"/><text x="64.8759%" y="271.50">send_file`core::iter:..</text></g><g><title>send_file`core::iter::traits::iterator::Iterator::try_fold (14 samples, 9.52%)</title><rect x="68.7075%" y="245" width="9.5238%" height="15" fill="rgb(221,1,38)" fg:x="101" fg:w="14"/><text x="68.9575%" y="255.50">send_file`core..</text></g><g><title>send_file`core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (14 samples, 9.52%)</title><rect x="68.7075%" y="229" width="9.5238%" height="15" fill="rgb(206,124,46)" fg:x="101" fg:w="14"/><text x="68.9575%" y="239.50">send_file`core..</text></g><g><title>send_file`serde::ser::Serializer::collect_seq::_{{closure}} (13 samples, 8.84%)</title><rect x="69.3878%" y="213" width="8.8435%" height="15" fill="rgb(249,21,11)" fg:x="102" fg:w="13"/><text x="69.6378%" y="223.50">send_file`se..</text></g><g><title>send_file`&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeSeq&gt;::serialize_element (12 samples, 8.16%)</title><rect x="70.0680%" y="197" width="8.1633%" height="15" fill="rgb(222,201,40)" fg:x="103" fg:w="12"/><text x="70.3180%" y="207.50">send_file`&lt;..</text></g><g><title>send_file`serde::ser::impls::_&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (11 samples, 7.48%)</title><rect x="70.7483%" y="181" width="7.4830%" height="15" fill="rgb(235,61,29)" fg:x="104" fg:w="11"/><text x="70.9983%" y="191.50">send_file`..</text></g><g><title>send_file`serde::ser::impls::_&lt;impl serde::ser::Serialize for u8&gt;::serialize (10 samples, 6.80%)</title><rect x="71.4286%" y="165" width="6.8027%" height="15" fill="rgb(219,207,3)" fg:x="105" fg:w="10"/><text x="71.6786%" y="175.50">send_file..</text></g><g><title>send_file`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u8 (9 samples, 6.12%)</title><rect x="72.1088%" y="149" width="6.1224%" height="15" fill="rgb(222,56,46)" fg:x="106" fg:w="9"/><text x="72.3588%" y="159.50">send_fil..</text></g><g><title>send_file`bincode::ser::Serializer&lt;W,O&gt;::serialize_byte (9 samples, 6.12%)</title><rect x="72.1088%" y="133" width="6.1224%" height="15" fill="rgb(239,76,54)" fg:x="106" fg:w="9"/><text x="72.3588%" y="143.50">send_fil..</text></g><g><title>send_file`core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.68%)</title><rect x="77.5510%" y="117" width="0.6803%" height="15" fill="rgb(231,124,27)" fg:x="114" fg:w="1"/><text x="77.8010%" y="127.50"></text></g><g><title>send_file`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 2.72%)</title><rect x="78.2313%" y="245" width="2.7211%" height="15" fill="rgb(249,195,6)" fg:x="115" fg:w="4"/><text x="78.4813%" y="255.50">se..</text></g><g><title>send_file`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.36%)</title><rect x="80.9524%" y="245" width="1.3605%" height="15" fill="rgb(237,174,47)" fg:x="119" fg:w="2"/><text x="81.2024%" y="255.50"></text></g><g><title>send_file`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.68%)</title><rect x="87.0748%" y="133" width="0.6803%" height="15" fill="rgb(206,201,31)" fg:x="128" fg:w="1"/><text x="87.3248%" y="143.50"></text></g><g><title>send_file`adrnaln::packet::Packet::to_bytes (35 samples, 23.81%)</title><rect x="64.6259%" y="389" width="23.8095%" height="15" fill="rgb(231,57,52)" fg:x="95" fg:w="35"/><text x="64.8759%" y="399.50">send_file`adrnaln::packet::Packet::to_..</text></g><g><title>send_file`bincode::serialize (35 samples, 23.81%)</title><rect x="64.6259%" y="373" width="23.8095%" height="15" fill="rgb(248,177,22)" fg:x="95" fg:w="35"/><text x="64.8759%" y="383.50">send_file`bincode::serialize</text></g><g><title>send_file`bincode::internal::serialize (35 samples, 23.81%)</title><rect x="64.6259%" y="357" width="23.8095%" height="15" fill="rgb(215,211,37)" fg:x="95" fg:w="35"/><text x="64.8759%" y="367.50">send_file`bincode::internal::serialize</text></g><g><title>send_file`bincode::internal::serialized_size (15 samples, 10.20%)</title><rect x="78.2313%" y="341" width="10.2041%" height="15" fill="rgb(241,128,51)" fg:x="115" fg:w="15"/><text x="78.4813%" y="351.50">send_file`binco..</text></g><g><title>send_file`adrnaln::packet::_::_&lt;impl serde::ser::Serialize for adrnaln::packet::Packet&gt;::serialize (15 samples, 10.20%)</title><rect x="78.2313%" y="325" width="10.2041%" height="15" fill="rgb(227,165,31)" fg:x="115" fg:w="15"/><text x="78.4813%" y="335.50">send_file`adrna..</text></g><g><title>send_file`&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (15 samples, 10.20%)</title><rect x="78.2313%" y="309" width="10.2041%" height="15" fill="rgb(228,167,24)" fg:x="115" fg:w="15"/><text x="78.4813%" y="319.50">send_file`&lt;binc..</text></g><g><title>send_file`serde::ser::impls::_&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (15 samples, 10.20%)</title><rect x="78.2313%" y="293" width="10.2041%" height="15" fill="rgb(228,143,12)" fg:x="115" fg:w="15"/><text x="78.4813%" y="303.50">send_file`serde..</text></g><g><title>send_file`serde::ser::Serializer::collect_seq (15 samples, 10.20%)</title><rect x="78.2313%" y="277" width="10.2041%" height="15" fill="rgb(249,149,8)" fg:x="115" fg:w="15"/><text x="78.4813%" y="287.50">send_file`serde..</text></g><g><title>send_file`core::iter::traits::iterator::Iterator::try_for_each (15 samples, 10.20%)</title><rect x="78.2313%" y="261" width="10.2041%" height="15" fill="rgb(243,35,44)" fg:x="115" fg:w="15"/><text x="78.4813%" y="271.50">send_file`core:..</text></g><g><title>send_file`core::iter::traits::iterator::Iterator::try_fold (9 samples, 6.12%)</title><rect x="82.3129%" y="245" width="6.1224%" height="15" fill="rgb(246,89,9)" fg:x="121" fg:w="9"/><text x="82.5629%" y="255.50">send_fil..</text></g><g><title>send_file`core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (5 samples, 3.40%)</title><rect x="85.0340%" y="229" width="3.4014%" height="15" fill="rgb(233,213,13)" fg:x="125" fg:w="5"/><text x="85.2840%" y="239.50">sen..</text></g><g><title>send_file`serde::ser::Serializer::collect_seq::_{{closure}} (5 samples, 3.40%)</title><rect x="85.0340%" y="213" width="3.4014%" height="15" fill="rgb(233,141,41)" fg:x="125" fg:w="5"/><text x="85.2840%" y="223.50">sen..</text></g><g><title>send_file`&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeSeq&gt;::serialize_element (5 samples, 3.40%)</title><rect x="85.0340%" y="197" width="3.4014%" height="15" fill="rgb(239,167,4)" fg:x="125" fg:w="5"/><text x="85.2840%" y="207.50">sen..</text></g><g><title>send_file`serde::ser::impls::_&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 2.72%)</title><rect x="85.7143%" y="181" width="2.7211%" height="15" fill="rgb(209,217,16)" fg:x="126" fg:w="4"/><text x="85.9643%" y="191.50">se..</text></g><g><title>send_file`serde::ser::impls::_&lt;impl serde::ser::Serialize for u8&gt;::serialize (2 samples, 1.36%)</title><rect x="87.0748%" y="165" width="1.3605%" height="15" fill="rgb(219,88,35)" fg:x="128" fg:w="2"/><text x="87.3248%" y="175.50"></text></g><g><title>send_file`&lt;&amp;mut bincode::ser::SizeChecker&lt;O&gt; as serde::ser::Serializer&gt;::serialize_u8 (2 samples, 1.36%)</title><rect x="87.0748%" y="149" width="1.3605%" height="15" fill="rgb(220,193,23)" fg:x="128" fg:w="2"/><text x="87.3248%" y="159.50"></text></g><g><title>send_file`bincode::ser::SizeChecker&lt;O&gt;::add_raw (1 samples, 0.68%)</title><rect x="87.7551%" y="133" width="0.6803%" height="15" fill="rgb(230,90,52)" fg:x="129" fg:w="1"/><text x="88.0051%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`setsockopt (1 samples, 0.68%)</title><rect x="88.4354%" y="309" width="0.6803%" height="15" fill="rgb(252,106,19)" fg:x="130" fg:w="1"/><text x="88.6854%" y="319.50"></text></g><g><title>send_file`tokio::net::udp::UdpSocket::bind::_{{closure}} (2 samples, 1.36%)</title><rect x="88.4354%" y="389" width="1.3605%" height="15" fill="rgb(206,74,20)" fg:x="130" fg:w="2"/><text x="88.6854%" y="399.50"></text></g><g><title>send_file`tokio::net::udp::UdpSocket::bind_addr (2 samples, 1.36%)</title><rect x="88.4354%" y="373" width="1.3605%" height="15" fill="rgb(230,138,44)" fg:x="130" fg:w="2"/><text x="88.6854%" y="383.50"></text></g><g><title>send_file`mio::net::udp::UdpSocket::bind (2 samples, 1.36%)</title><rect x="88.4354%" y="357" width="1.3605%" height="15" fill="rgb(235,182,43)" fg:x="130" fg:w="2"/><text x="88.6854%" y="367.50"></text></g><g><title>send_file`mio::sys::unix::udp::bind (2 samples, 1.36%)</title><rect x="88.4354%" y="341" width="1.3605%" height="15" fill="rgb(242,16,51)" fg:x="130" fg:w="2"/><text x="88.6854%" y="351.50"></text></g><g><title>send_file`mio::sys::unix::net::new_ip_socket (2 samples, 1.36%)</title><rect x="88.4354%" y="325" width="1.3605%" height="15" fill="rgb(248,9,4)" fg:x="130" fg:w="2"/><text x="88.6854%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`socket (1 samples, 0.68%)</title><rect x="89.1156%" y="309" width="0.6803%" height="15" fill="rgb(210,31,22)" fg:x="131" fg:w="1"/><text x="89.3656%" y="319.50"></text></g><g><title>send_file`tokio::net::udp::UdpSocket::connect::_{{closure}} (2 samples, 1.36%)</title><rect x="89.7959%" y="389" width="1.3605%" height="15" fill="rgb(239,54,39)" fg:x="132" fg:w="2"/><text x="90.0459%" y="399.50"></text></g><g><title>send_file`mio::net::udp::UdpSocket::connect (2 samples, 1.36%)</title><rect x="89.7959%" y="373" width="1.3605%" height="15" fill="rgb(230,99,41)" fg:x="132" fg:w="2"/><text x="90.0459%" y="383.50"></text></g><g><title>send_file`std::net::udp::UdpSocket::connect (2 samples, 1.36%)</title><rect x="89.7959%" y="357" width="1.3605%" height="15" fill="rgb(253,106,12)" fg:x="132" fg:w="2"/><text x="90.0459%" y="367.50"></text></g><g><title>send_file`std::net::each_addr (2 samples, 1.36%)</title><rect x="89.7959%" y="341" width="1.3605%" height="15" fill="rgb(213,46,41)" fg:x="132" fg:w="2"/><text x="90.0459%" y="351.50"></text></g><g><title>send_file`std::net::udp::UdpSocket::connect::_{{closure}} (2 samples, 1.36%)</title><rect x="89.7959%" y="325" width="1.3605%" height="15" fill="rgb(215,133,35)" fg:x="132" fg:w="2"/><text x="90.0459%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__connect (2 samples, 1.36%)</title><rect x="89.7959%" y="309" width="1.3605%" height="15" fill="rgb(213,28,5)" fg:x="132" fg:w="2"/><text x="90.0459%" y="319.50"></text></g><g><title>send_file`adrnaln::client::Client::send_sequence::_{{closure}} (41 samples, 27.89%)</title><rect x="64.6259%" y="421" width="27.8912%" height="15" fill="rgb(215,77,49)" fg:x="95" fg:w="41"/><text x="64.8759%" y="431.50">send_file`adrnaln::client::Client::send_seque..</text></g><g><title>send_file`adrnaln::client::Client::send_packet::_{{closure}} (41 samples, 27.89%)</title><rect x="64.6259%" y="405" width="27.8912%" height="15" fill="rgb(248,100,22)" fg:x="95" fg:w="41"/><text x="64.8759%" y="415.50">send_file`adrnaln::client::Client::send_packe..</text></g><g><title>send_file`tokio::net::udp::UdpSocket::send::_{{closure}} (2 samples, 1.36%)</title><rect x="91.1565%" y="389" width="1.3605%" height="15" fill="rgb(208,67,9)" fg:x="134" fg:w="2"/><text x="91.4065%" y="399.50"></text></g><g><title>send_file`tokio::runtime::io::registration::Registration::async_io::_{{closure}} (2 samples, 1.36%)</title><rect x="91.1565%" y="373" width="1.3605%" height="15" fill="rgb(219,133,21)" fg:x="134" fg:w="2"/><text x="91.4065%" y="383.50"></text></g><g><title>send_file`tokio::net::udp::UdpSocket::send::_{{closure}}::_{{closure}} (2 samples, 1.36%)</title><rect x="91.1565%" y="357" width="1.3605%" height="15" fill="rgb(246,46,29)" fg:x="134" fg:w="2"/><text x="91.4065%" y="367.50"></text></g><g><title>send_file`mio::net::udp::UdpSocket::send (2 samples, 1.36%)</title><rect x="91.1565%" y="341" width="1.3605%" height="15" fill="rgb(246,185,52)" fg:x="134" fg:w="2"/><text x="91.4065%" y="351.50"></text></g><g><title>send_file`mio::io_source::IoSource&lt;T&gt;::do_io (2 samples, 1.36%)</title><rect x="91.1565%" y="325" width="1.3605%" height="15" fill="rgb(252,136,11)" fg:x="134" fg:w="2"/><text x="91.4065%" y="335.50"></text></g><g><title>send_file`mio::sys::unix::stateless_io_source::IoSourceState::do_io (2 samples, 1.36%)</title><rect x="91.1565%" y="309" width="1.3605%" height="15" fill="rgb(219,138,53)" fg:x="134" fg:w="2"/><text x="91.4065%" y="319.50"></text></g><g><title>send_file`mio::net::udp::UdpSocket::send::_{{closure}} (2 samples, 1.36%)</title><rect x="91.1565%" y="293" width="1.3605%" height="15" fill="rgb(211,51,23)" fg:x="134" fg:w="2"/><text x="91.4065%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (2 samples, 1.36%)</title><rect x="91.1565%" y="277" width="1.3605%" height="15" fill="rgb(247,221,28)" fg:x="134" fg:w="2"/><text x="91.4065%" y="287.50"></text></g><g><title>send_file`alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.68%)</title><rect x="92.5170%" y="421" width="0.6803%" height="15" fill="rgb(251,222,45)" fg:x="136" fg:w="1"/><text x="92.7670%" y="431.50"></text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (111 samples, 75.51%)</title><rect x="18.3673%" y="677" width="75.5102%" height="15" fill="rgb(217,162,53)" fg:x="27" fg:w="111"/><text x="18.6173%" y="687.50">send_file`tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}}</text></g><g><title>send_file`tokio::runtime::task::LocalNotified&lt;S&gt;::run (111 samples, 75.51%)</title><rect x="18.3673%" y="661" width="75.5102%" height="15" fill="rgb(229,93,14)" fg:x="27" fg:w="111"/><text x="18.6173%" y="671.50">send_file`tokio::runtime::task::LocalNotified&lt;S&gt;::run</text></g><g><title>send_file`tokio::runtime::task::raw::RawTask::poll (111 samples, 75.51%)</title><rect x="18.3673%" y="645" width="75.5102%" height="15" fill="rgb(209,67,49)" fg:x="27" fg:w="111"/><text x="18.6173%" y="655.50">send_file`tokio::runtime::task::raw::RawTask::poll</text></g><g><title>send_file`tokio::runtime::task::raw::poll (111 samples, 75.51%)</title><rect x="18.3673%" y="629" width="75.5102%" height="15" fill="rgb(213,87,29)" fg:x="27" fg:w="111"/><text x="18.6173%" y="639.50">send_file`tokio::runtime::task::raw::poll</text></g><g><title>send_file`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (111 samples, 75.51%)</title><rect x="18.3673%" y="613" width="75.5102%" height="15" fill="rgb(205,151,52)" fg:x="27" fg:w="111"/><text x="18.6173%" y="623.50">send_file`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>send_file`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (111 samples, 75.51%)</title><rect x="18.3673%" y="597" width="75.5102%" height="15" fill="rgb(253,215,39)" fg:x="27" fg:w="111"/><text x="18.6173%" y="607.50">send_file`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>send_file`tokio::runtime::task::harness::poll_future (111 samples, 75.51%)</title><rect x="18.3673%" y="581" width="75.5102%" height="15" fill="rgb(221,220,41)" fg:x="27" fg:w="111"/><text x="18.6173%" y="591.50">send_file`tokio::runtime::task::harness::poll_future</text></g><g><title>send_file`std::panic::catch_unwind (111 samples, 75.51%)</title><rect x="18.3673%" y="565" width="75.5102%" height="15" fill="rgb(218,133,21)" fg:x="27" fg:w="111"/><text x="18.6173%" y="575.50">send_file`std::panic::catch_unwind</text></g><g><title>send_file`std::panicking::try (111 samples, 75.51%)</title><rect x="18.3673%" y="549" width="75.5102%" height="15" fill="rgb(221,193,43)" fg:x="27" fg:w="111"/><text x="18.6173%" y="559.50">send_file`std::panicking::try</text></g><g><title>send_file`__rust_try (111 samples, 75.51%)</title><rect x="18.3673%" y="533" width="75.5102%" height="15" fill="rgb(240,128,52)" fg:x="27" fg:w="111"/><text x="18.6173%" y="543.50">send_file`__rust_try</text></g><g><title>send_file`std::panicking::try::do_call (111 samples, 75.51%)</title><rect x="18.3673%" y="517" width="75.5102%" height="15" fill="rgb(253,114,12)" fg:x="27" fg:w="111"/><text x="18.6173%" y="527.50">send_file`std::panicking::try::do_call</text></g><g><title>send_file`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (111 samples, 75.51%)</title><rect x="18.3673%" y="501" width="75.5102%" height="15" fill="rgb(215,223,47)" fg:x="27" fg:w="111"/><text x="18.6173%" y="511.50">send_file`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>send_file`tokio::runtime::task::harness::poll_future::_{{closure}} (111 samples, 75.51%)</title><rect x="18.3673%" y="485" width="75.5102%" height="15" fill="rgb(248,225,23)" fg:x="27" fg:w="111"/><text x="18.6173%" y="495.50">send_file`tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>send_file`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (111 samples, 75.51%)</title><rect x="18.3673%" y="469" width="75.5102%" height="15" fill="rgb(250,108,0)" fg:x="27" fg:w="111"/><text x="18.6173%" y="479.50">send_file`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>send_file`tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (111 samples, 75.51%)</title><rect x="18.3673%" y="453" width="75.5102%" height="15" fill="rgb(228,208,7)" fg:x="27" fg:w="111"/><text x="18.6173%" y="463.50">send_file`tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>send_file`send_file::main::_{{closure}}::_{{closure}} (44 samples, 29.93%)</title><rect x="63.9456%" y="437" width="29.9320%" height="15" fill="rgb(244,45,10)" fg:x="94" fg:w="44"/><text x="64.1956%" y="447.50">send_file`send_file::main::_{{closure}}::_{{clos..</text></g><g><title>send_file`tokio::fs::write::write::_{{closure}} (1 samples, 0.68%)</title><rect x="93.1973%" y="421" width="0.6803%" height="15" fill="rgb(207,125,25)" fg:x="137" fg:w="1"/><text x="93.4473%" y="431.50"></text></g><g><title>send_file`alloc::slice::_&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.68%)</title><rect x="93.1973%" y="405" width="0.6803%" height="15" fill="rgb(210,195,18)" fg:x="137" fg:w="1"/><text x="93.4473%" y="415.50"></text></g><g><title>send_file`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.68%)</title><rect x="93.1973%" y="389" width="0.6803%" height="15" fill="rgb(249,80,12)" fg:x="137" fg:w="1"/><text x="93.4473%" y="399.50"></text></g><g><title>send_file`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.68%)</title><rect x="93.1973%" y="373" width="0.6803%" height="15" fill="rgb(221,65,9)" fg:x="137" fg:w="1"/><text x="93.4473%" y="383.50"></text></g><g><title>send_file`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.68%)</title><rect x="93.1973%" y="357" width="0.6803%" height="15" fill="rgb(235,49,36)" fg:x="137" fg:w="1"/><text x="93.4473%" y="367.50"></text></g><g><title>send_file`alloc::alloc::Global::alloc_impl (1 samples, 0.68%)</title><rect x="93.1973%" y="341" width="0.6803%" height="15" fill="rgb(225,32,20)" fg:x="137" fg:w="1"/><text x="93.4473%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.68%)</title><rect x="93.1973%" y="325" width="0.6803%" height="15" fill="rgb(215,141,46)" fg:x="137" fg:w="1"/><text x="93.4473%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.68%)</title><rect x="93.1973%" y="309" width="0.6803%" height="15" fill="rgb(250,160,47)" fg:x="137" fg:w="1"/><text x="93.4473%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (1 samples, 0.68%)</title><rect x="93.1973%" y="293" width="0.6803%" height="15" fill="rgb(216,222,40)" fg:x="137" fg:w="1"/><text x="93.4473%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.68%)</title><rect x="93.1973%" y="277" width="0.6803%" height="15" fill="rgb(234,217,39)" fg:x="137" fg:w="1"/><text x="93.4473%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (132 samples, 89.80%)</title><rect x="4.7619%" y="1333" width="89.7959%" height="15" fill="rgb(207,178,40)" fg:x="7" fg:w="132"/><text x="5.0119%" y="1343.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (132 samples, 89.80%)</title><rect x="4.7619%" y="1317" width="89.7959%" height="15" fill="rgb(221,136,13)" fg:x="7" fg:w="132"/><text x="5.0119%" y="1327.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>send_file`std::sys::unix::thread::Thread::new::thread_start (128 samples, 87.07%)</title><rect x="7.4830%" y="1301" width="87.0748%" height="15" fill="rgb(249,199,10)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1311.50">send_file`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>send_file`core::ops::function::FnOnce::call_once{{vtable.shim}} (128 samples, 87.07%)</title><rect x="7.4830%" y="1285" width="87.0748%" height="15" fill="rgb(249,222,13)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1295.50">send_file`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>send_file`std::thread::Builder::spawn_unchecked_::_{{closure}} (128 samples, 87.07%)</title><rect x="7.4830%" y="1269" width="87.0748%" height="15" fill="rgb(244,185,38)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1279.50">send_file`std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>send_file`std::panicking::try (128 samples, 87.07%)</title><rect x="7.4830%" y="1253" width="87.0748%" height="15" fill="rgb(236,202,9)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1263.50">send_file`std::panicking::try</text></g><g><title>send_file`__rust_try (128 samples, 87.07%)</title><rect x="7.4830%" y="1237" width="87.0748%" height="15" fill="rgb(250,229,37)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1247.50">send_file`__rust_try</text></g><g><title>send_file`std::panicking::try::do_call (128 samples, 87.07%)</title><rect x="7.4830%" y="1221" width="87.0748%" height="15" fill="rgb(206,174,23)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1231.50">send_file`std::panicking::try::do_call</text></g><g><title>send_file`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (128 samples, 87.07%)</title><rect x="7.4830%" y="1205" width="87.0748%" height="15" fill="rgb(211,33,43)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1215.50">send_file`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>send_file`std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (128 samples, 87.07%)</title><rect x="7.4830%" y="1189" width="87.0748%" height="15" fill="rgb(245,58,50)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1199.50">send_file`std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>send_file`std::sys_common::backtrace::__rust_begin_short_backtrace (128 samples, 87.07%)</title><rect x="7.4830%" y="1173" width="87.0748%" height="15" fill="rgb(244,68,36)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1183.50">send_file`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>send_file`tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (128 samples, 87.07%)</title><rect x="7.4830%" y="1157" width="87.0748%" height="15" fill="rgb(232,229,15)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1167.50">send_file`tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}}</text></g><g><title>send_file`tokio::runtime::blocking::pool::Inner::run (128 samples, 87.07%)</title><rect x="7.4830%" y="1141" width="87.0748%" height="15" fill="rgb(254,30,23)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1151.50">send_file`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>send_file`tokio::runtime::blocking::pool::Task::run (128 samples, 87.07%)</title><rect x="7.4830%" y="1125" width="87.0748%" height="15" fill="rgb(235,160,14)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1135.50">send_file`tokio::runtime::blocking::pool::Task::run</text></g><g><title>send_file`tokio::runtime::task::UnownedTask&lt;S&gt;::run (128 samples, 87.07%)</title><rect x="7.4830%" y="1109" width="87.0748%" height="15" fill="rgb(212,155,44)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1119.50">send_file`tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>send_file`tokio::runtime::task::raw::RawTask::poll (128 samples, 87.07%)</title><rect x="7.4830%" y="1093" width="87.0748%" height="15" fill="rgb(226,2,50)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1103.50">send_file`tokio::runtime::task::raw::RawTask::poll</text></g><g><title>send_file`tokio::runtime::task::raw::poll (128 samples, 87.07%)</title><rect x="7.4830%" y="1077" width="87.0748%" height="15" fill="rgb(234,177,6)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1087.50">send_file`tokio::runtime::task::raw::poll</text></g><g><title>send_file`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (128 samples, 87.07%)</title><rect x="7.4830%" y="1061" width="87.0748%" height="15" fill="rgb(217,24,9)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1071.50">send_file`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>send_file`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (128 samples, 87.07%)</title><rect x="7.4830%" y="1045" width="87.0748%" height="15" fill="rgb(220,13,46)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1055.50">send_file`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>send_file`tokio::runtime::task::harness::poll_future (128 samples, 87.07%)</title><rect x="7.4830%" y="1029" width="87.0748%" height="15" fill="rgb(239,221,27)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1039.50">send_file`tokio::runtime::task::harness::poll_future</text></g><g><title>send_file`std::panic::catch_unwind (128 samples, 87.07%)</title><rect x="7.4830%" y="1013" width="87.0748%" height="15" fill="rgb(222,198,25)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1023.50">send_file`std::panic::catch_unwind</text></g><g><title>send_file`std::panicking::try (128 samples, 87.07%)</title><rect x="7.4830%" y="997" width="87.0748%" height="15" fill="rgb(211,99,13)" fg:x="11" fg:w="128"/><text x="7.7330%" y="1007.50">send_file`std::panicking::try</text></g><g><title>send_file`__rust_try (128 samples, 87.07%)</title><rect x="7.4830%" y="981" width="87.0748%" height="15" fill="rgb(232,111,31)" fg:x="11" fg:w="128"/><text x="7.7330%" y="991.50">send_file`__rust_try</text></g><g><title>send_file`std::panicking::try::do_call (128 samples, 87.07%)</title><rect x="7.4830%" y="965" width="87.0748%" height="15" fill="rgb(245,82,37)" fg:x="11" fg:w="128"/><text x="7.7330%" y="975.50">send_file`std::panicking::try::do_call</text></g><g><title>send_file`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (128 samples, 87.07%)</title><rect x="7.4830%" y="949" width="87.0748%" height="15" fill="rgb(227,149,46)" fg:x="11" fg:w="128"/><text x="7.7330%" y="959.50">send_file`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>send_file`tokio::runtime::task::harness::poll_future::_{{closure}} (128 samples, 87.07%)</title><rect x="7.4830%" y="933" width="87.0748%" height="15" fill="rgb(218,36,50)" fg:x="11" fg:w="128"/><text x="7.7330%" y="943.50">send_file`tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>send_file`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (128 samples, 87.07%)</title><rect x="7.4830%" y="917" width="87.0748%" height="15" fill="rgb(226,80,48)" fg:x="11" fg:w="128"/><text x="7.7330%" y="927.50">send_file`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>send_file`tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (128 samples, 87.07%)</title><rect x="7.4830%" y="901" width="87.0748%" height="15" fill="rgb(238,224,15)" fg:x="11" fg:w="128"/><text x="7.7330%" y="911.50">send_file`tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>send_file`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (128 samples, 87.07%)</title><rect x="7.4830%" y="885" width="87.0748%" height="15" fill="rgb(241,136,10)" fg:x="11" fg:w="128"/><text x="7.7330%" y="895.50">send_file`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (126 samples, 85.71%)</title><rect x="8.8435%" y="869" width="85.7143%" height="15" fill="rgb(208,32,45)" fg:x="13" fg:w="126"/><text x="9.0935%" y="879.50">send_file`tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}}</text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::worker::run (126 samples, 85.71%)</title><rect x="8.8435%" y="853" width="85.7143%" height="15" fill="rgb(207,135,9)" fg:x="13" fg:w="126"/><text x="9.0935%" y="863.50">send_file`tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>send_file`tokio::runtime::context::runtime::enter_runtime (126 samples, 85.71%)</title><rect x="8.8435%" y="837" width="85.7143%" height="15" fill="rgb(206,86,44)" fg:x="13" fg:w="126"/><text x="9.0935%" y="847.50">send_file`tokio::runtime::context::runtime::enter_runtime</text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (126 samples, 85.71%)</title><rect x="8.8435%" y="821" width="85.7143%" height="15" fill="rgb(245,177,15)" fg:x="13" fg:w="126"/><text x="9.0935%" y="831.50">send_file`tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}</text></g><g><title>send_file`tokio::runtime::context::set_scheduler (126 samples, 85.71%)</title><rect x="8.8435%" y="805" width="85.7143%" height="15" fill="rgb(206,64,50)" fg:x="13" fg:w="126"/><text x="9.0935%" y="815.50">send_file`tokio::runtime::context::set_scheduler</text></g><g><title>send_file`std::thread::local::LocalKey&lt;T&gt;::with (126 samples, 85.71%)</title><rect x="8.8435%" y="789" width="85.7143%" height="15" fill="rgb(234,36,40)" fg:x="13" fg:w="126"/><text x="9.0935%" y="799.50">send_file`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>send_file`std::thread::local::LocalKey&lt;T&gt;::try_with (126 samples, 85.71%)</title><rect x="8.8435%" y="773" width="85.7143%" height="15" fill="rgb(213,64,8)" fg:x="13" fg:w="126"/><text x="9.0935%" y="783.50">send_file`std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>send_file`tokio::runtime::context::set_scheduler::_{{closure}} (126 samples, 85.71%)</title><rect x="8.8435%" y="757" width="85.7143%" height="15" fill="rgb(210,75,36)" fg:x="13" fg:w="126"/><text x="9.0935%" y="767.50">send_file`tokio::runtime::context::set_scheduler::_{{closure}}</text></g><g><title>send_file`tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (126 samples, 85.71%)</title><rect x="8.8435%" y="741" width="85.7143%" height="15" fill="rgb(229,88,21)" fg:x="13" fg:w="126"/><text x="9.0935%" y="751.50">send_file`tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (126 samples, 85.71%)</title><rect x="8.8435%" y="725" width="85.7143%" height="15" fill="rgb(252,204,47)" fg:x="13" fg:w="126"/><text x="9.0935%" y="735.50">send_file`tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}}</text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::worker::Context::run (126 samples, 85.71%)</title><rect x="8.8435%" y="709" width="85.7143%" height="15" fill="rgb(208,77,27)" fg:x="13" fg:w="126"/><text x="9.0935%" y="719.50">send_file`tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (112 samples, 76.19%)</title><rect x="18.3673%" y="693" width="76.1905%" height="15" fill="rgb(221,76,26)" fg:x="27" fg:w="112"/><text x="18.6173%" y="703.50">send_file`tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_searching (1 samples, 0.68%)</title><rect x="93.8776%" y="677" width="0.6803%" height="15" fill="rgb(225,139,18)" fg:x="138" fg:w="1"/><text x="94.1276%" y="687.50"></text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (1 samples, 0.68%)</title><rect x="93.8776%" y="661" width="0.6803%" height="15" fill="rgb(230,137,11)" fg:x="138" fg:w="1"/><text x="94.1276%" y="671.50"></text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (1 samples, 0.68%)</title><rect x="93.8776%" y="645" width="0.6803%" height="15" fill="rgb(212,28,1)" fg:x="138" fg:w="1"/><text x="94.1276%" y="655.50"></text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.68%)</title><rect x="93.8776%" y="629" width="0.6803%" height="15" fill="rgb(248,164,17)" fg:x="138" fg:w="1"/><text x="94.1276%" y="639.50"></text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::park::Inner::unpark (1 samples, 0.68%)</title><rect x="93.8776%" y="613" width="0.6803%" height="15" fill="rgb(222,171,42)" fg:x="138" fg:w="1"/><text x="94.1276%" y="623.50"></text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::park::Inner::unpark_condvar (1 samples, 0.68%)</title><rect x="93.8776%" y="597" width="0.6803%" height="15" fill="rgb(243,84,45)" fg:x="138" fg:w="1"/><text x="94.1276%" y="607.50"></text></g><g><title>send_file`tokio::loom::std::parking_lot::Condvar::notify_one (1 samples, 0.68%)</title><rect x="93.8776%" y="581" width="0.6803%" height="15" fill="rgb(252,49,23)" fg:x="138" fg:w="1"/><text x="94.1276%" y="591.50"></text></g><g><title>send_file`parking_lot::condvar::Condvar::notify_one (1 samples, 0.68%)</title><rect x="93.8776%" y="565" width="0.6803%" height="15" fill="rgb(215,19,7)" fg:x="138" fg:w="1"/><text x="94.1276%" y="575.50"></text></g><g><title>send_file`parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.68%)</title><rect x="93.8776%" y="549" width="0.6803%" height="15" fill="rgb(238,81,41)" fg:x="138" fg:w="1"/><text x="94.1276%" y="559.50"></text></g><g><title>send_file`parking_lot_core::parking_lot::unpark_requeue (1 samples, 0.68%)</title><rect x="93.8776%" y="533" width="0.6803%" height="15" fill="rgb(210,199,37)" fg:x="138" fg:w="1"/><text x="94.1276%" y="543.50"></text></g><g><title>send_file`parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.68%)</title><rect x="93.8776%" y="517" width="0.6803%" height="15" fill="rgb(244,192,49)" fg:x="138" fg:w="1"/><text x="94.1276%" y="527.50"></text></g><g><title>send_file`parking_lot_core::parking_lot::get_hashtable (1 samples, 0.68%)</title><rect x="93.8776%" y="501" width="0.6803%" height="15" fill="rgb(226,211,11)" fg:x="138" fg:w="1"/><text x="94.1276%" y="511.50"></text></g><g><title>send_file`core::sync::atomic::AtomicPtr&lt;T&gt;::load (1 samples, 0.68%)</title><rect x="93.8776%" y="485" width="0.6803%" height="15" fill="rgb(236,162,54)" fg:x="138" fg:w="1"/><text x="94.1276%" y="495.50"></text></g><g><title>send_file`core::sync::atomic::atomic_load (1 samples, 0.68%)</title><rect x="93.8776%" y="469" width="0.6803%" height="15" fill="rgb(220,229,9)" fg:x="138" fg:w="1"/><text x="94.1276%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (1 samples, 0.68%)</title><rect x="94.5578%" y="1205" width="0.6803%" height="15" fill="rgb(250,87,22)" fg:x="139" fg:w="1"/><text x="94.8078%" y="1215.50"></text></g><g><title>send_file`&lt;adrnaln::server::Server as core::clone::Clone&gt;::clone (1 samples, 0.68%)</title><rect x="95.2381%" y="1205" width="0.6803%" height="15" fill="rgb(239,43,17)" fg:x="140" fg:w="1"/><text x="95.4881%" y="1215.50"></text></g><g><title>send_file`&lt;adrnaln::config::Configuration as core::clone::Clone&gt;::clone (1 samples, 0.68%)</title><rect x="95.2381%" y="1189" width="0.6803%" height="15" fill="rgb(231,177,25)" fg:x="140" fg:w="1"/><text x="95.4881%" y="1199.50"></text></g><g><title>send_file`&lt;core::net::socket_addr::SocketAddr as core::clone::Clone&gt;::clone (1 samples, 0.68%)</title><rect x="95.2381%" y="1173" width="0.6803%" height="15" fill="rgb(219,179,1)" fg:x="140" fg:w="1"/><text x="95.4881%" y="1183.50"></text></g><g><title>send_file`&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (1 samples, 0.68%)</title><rect x="95.9184%" y="1205" width="0.6803%" height="15" fill="rgb(238,219,53)" fg:x="141" fg:w="1"/><text x="96.1684%" y="1215.50"></text></g><g><title>send_file`tokio::time::sleep::Sleep::poll_elapsed (1 samples, 0.68%)</title><rect x="95.9184%" y="1189" width="0.6803%" height="15" fill="rgb(232,167,36)" fg:x="141" fg:w="1"/><text x="96.1684%" y="1199.50"></text></g><g><title>send_file`tokio::runtime::time::entry::TimerEntry::poll_elapsed (1 samples, 0.68%)</title><rect x="95.9184%" y="1173" width="0.6803%" height="15" fill="rgb(244,19,51)" fg:x="141" fg:w="1"/><text x="96.1684%" y="1183.50"></text></g><g><title>send_file`tokio::runtime::time::entry::TimerEntry::reset (1 samples, 0.68%)</title><rect x="95.9184%" y="1157" width="0.6803%" height="15" fill="rgb(224,6,22)" fg:x="141" fg:w="1"/><text x="96.1684%" y="1167.50"></text></g><g><title>send_file`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::reregister (1 samples, 0.68%)</title><rect x="95.9184%" y="1141" width="0.6803%" height="15" fill="rgb(224,145,5)" fg:x="141" fg:w="1"/><text x="96.1684%" y="1151.50"></text></g><g><title>send_file`tokio::runtime::driver::IoHandle::unpark (1 samples, 0.68%)</title><rect x="95.9184%" y="1125" width="0.6803%" height="15" fill="rgb(234,130,49)" fg:x="141" fg:w="1"/><text x="96.1684%" y="1135.50"></text></g><g><title>send_file`tokio::runtime::io::driver::Handle::unpark (1 samples, 0.68%)</title><rect x="95.9184%" y="1109" width="0.6803%" height="15" fill="rgb(254,6,2)" fg:x="141" fg:w="1"/><text x="96.1684%" y="1119.50"></text></g><g><title>send_file`mio::waker::Waker::wake (1 samples, 0.68%)</title><rect x="95.9184%" y="1093" width="0.6803%" height="15" fill="rgb(208,96,46)" fg:x="141" fg:w="1"/><text x="96.1684%" y="1103.50"></text></g><g><title>send_file`mio::sys::unix::waker::kqueue::Waker::wake (1 samples, 0.68%)</title><rect x="95.9184%" y="1077" width="0.6803%" height="15" fill="rgb(239,3,39)" fg:x="141" fg:w="1"/><text x="96.1684%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`kevent (1 samples, 0.68%)</title><rect x="95.9184%" y="1061" width="0.6803%" height="15" fill="rgb(233,210,1)" fg:x="141" fg:w="1"/><text x="96.1684%" y="1071.50"></text></g><g><title>send_file`tokio::runtime::park::CachedParkThread::block_on::_{{closure}} (5 samples, 3.40%)</title><rect x="94.5578%" y="1253" width="3.4014%" height="15" fill="rgb(244,137,37)" fg:x="139" fg:w="5"/><text x="94.8078%" y="1263.50">sen..</text></g><g><title>send_file`send_file::main::_{{closure}} (5 samples, 3.40%)</title><rect x="94.5578%" y="1237" width="3.4014%" height="15" fill="rgb(240,136,2)" fg:x="139" fg:w="5"/><text x="94.8078%" y="1247.50">sen..</text></g><g><title>send_file`adrnaln::server::Server::serve_new::_{{closure}} (5 samples, 3.40%)</title><rect x="94.5578%" y="1221" width="3.4014%" height="15" fill="rgb(239,18,37)" fg:x="139" fg:w="5"/><text x="94.8078%" y="1231.50">sen..</text></g><g><title>send_file`core::ptr::drop_in_place&lt;std::net::udp::UdpSocket&gt; (2 samples, 1.36%)</title><rect x="96.5986%" y="1205" width="1.3605%" height="15" fill="rgb(218,185,22)" fg:x="142" fg:w="2"/><text x="96.8486%" y="1215.50"></text></g><g><title>send_file`core::ptr::drop_in_place&lt;std::sys_common::net::UdpSocket&gt; (2 samples, 1.36%)</title><rect x="96.5986%" y="1189" width="1.3605%" height="15" fill="rgb(225,218,4)" fg:x="142" fg:w="2"/><text x="96.8486%" y="1199.50"></text></g><g><title>send_file`core::ptr::drop_in_place&lt;std::sys::unix::net::Socket&gt; (2 samples, 1.36%)</title><rect x="96.5986%" y="1173" width="1.3605%" height="15" fill="rgb(230,182,32)" fg:x="142" fg:w="2"/><text x="96.8486%" y="1183.50"></text></g><g><title>send_file`core::ptr::drop_in_place&lt;std::sys::unix::fd::FileDesc&gt; (2 samples, 1.36%)</title><rect x="96.5986%" y="1157" width="1.3605%" height="15" fill="rgb(242,56,43)" fg:x="142" fg:w="2"/><text x="96.8486%" y="1167.50"></text></g><g><title>send_file`core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; (2 samples, 1.36%)</title><rect x="96.5986%" y="1141" width="1.3605%" height="15" fill="rgb(233,99,24)" fg:x="142" fg:w="2"/><text x="96.8486%" y="1151.50"></text></g><g><title>libsystem_kernel.dylib`close (2 samples, 1.36%)</title><rect x="96.5986%" y="1125" width="1.3605%" height="15" fill="rgb(234,209,42)" fg:x="142" fg:w="2"/><text x="96.8486%" y="1135.50"></text></g><g><title>send_file`core::ops::function::FnOnce::call_once (1 samples, 0.68%)</title><rect x="98.6395%" y="1093" width="0.6803%" height="15" fill="rgb(227,7,12)" fg:x="145" fg:w="1"/><text x="98.8895%" y="1103.50"></text></g><g><title>all (147 samples, 100%)</title><rect x="0.0000%" y="1349" width="100.0000%" height="15" fill="rgb(245,203,43)" fg:x="0" fg:w="147"/><text x="0.2500%" y="1359.50"></text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::MultiThread::block_on (8 samples, 5.44%)</title><rect x="94.5578%" y="1333" width="5.4422%" height="15" fill="rgb(238,205,33)" fg:x="139" fg:w="8"/><text x="94.8078%" y="1343.50">send_fi..</text></g><g><title>send_file`tokio::runtime::context::runtime::enter_runtime (8 samples, 5.44%)</title><rect x="94.5578%" y="1317" width="5.4422%" height="15" fill="rgb(231,56,7)" fg:x="139" fg:w="8"/><text x="94.8078%" y="1327.50">send_fi..</text></g><g><title>send_file`tokio::runtime::scheduler::multi_thread::MultiThread::block_on::_{{closure}} (8 samples, 5.44%)</title><rect x="94.5578%" y="1301" width="5.4422%" height="15" fill="rgb(244,186,29)" fg:x="139" fg:w="8"/><text x="94.8078%" y="1311.50">send_fi..</text></g><g><title>send_file`tokio::runtime::context::blocking::BlockingRegionGuard::block_on (8 samples, 5.44%)</title><rect x="94.5578%" y="1285" width="5.4422%" height="15" fill="rgb(234,111,31)" fg:x="139" fg:w="8"/><text x="94.8078%" y="1295.50">send_fi..</text></g><g><title>send_file`tokio::runtime::park::CachedParkThread::block_on (8 samples, 5.44%)</title><rect x="94.5578%" y="1269" width="5.4422%" height="15" fill="rgb(241,149,10)" fg:x="139" fg:w="8"/><text x="94.8078%" y="1279.50">send_fi..</text></g><g><title>send_file`tokio::runtime::park::CachedParkThread::park (3 samples, 2.04%)</title><rect x="97.9592%" y="1253" width="2.0408%" height="15" fill="rgb(249,206,44)" fg:x="144" fg:w="3"/><text x="98.2092%" y="1263.50">s..</text></g><g><title>send_file`tokio::runtime::park::CachedParkThread::with_current (3 samples, 2.04%)</title><rect x="97.9592%" y="1237" width="2.0408%" height="15" fill="rgb(251,153,30)" fg:x="144" fg:w="3"/><text x="98.2092%" y="1247.50">s..</text></g><g><title>send_file`std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 2.04%)</title><rect x="97.9592%" y="1221" width="2.0408%" height="15" fill="rgb(239,152,38)" fg:x="144" fg:w="3"/><text x="98.2092%" y="1231.50">s..</text></g><g><title>send_file`tokio::runtime::park::CachedParkThread::with_current::_{{closure}} (3 samples, 2.04%)</title><rect x="97.9592%" y="1205" width="2.0408%" height="15" fill="rgb(249,139,47)" fg:x="144" fg:w="3"/><text x="98.2092%" y="1215.50">s..</text></g><g><title>send_file`tokio::runtime::park::CachedParkThread::park::_{{closure}} (3 samples, 2.04%)</title><rect x="97.9592%" y="1189" width="2.0408%" height="15" fill="rgb(244,64,35)" fg:x="144" fg:w="3"/><text x="98.2092%" y="1199.50">s..</text></g><g><title>send_file`tokio::runtime::park::Inner::park (3 samples, 2.04%)</title><rect x="97.9592%" y="1173" width="2.0408%" height="15" fill="rgb(216,46,15)" fg:x="144" fg:w="3"/><text x="98.2092%" y="1183.50">s..</text></g><g><title>send_file`tokio::loom::std::parking_lot::Condvar::wait (3 samples, 2.04%)</title><rect x="97.9592%" y="1157" width="2.0408%" height="15" fill="rgb(250,74,19)" fg:x="144" fg:w="3"/><text x="98.2092%" y="1167.50">s..</text></g><g><title>send_file`parking_lot::condvar::Condvar::wait (2 samples, 1.36%)</title><rect x="98.6395%" y="1141" width="1.3605%" height="15" fill="rgb(249,42,33)" fg:x="145" fg:w="2"/><text x="98.8895%" y="1151.50"></text></g><g><title>send_file`parking_lot::condvar::Condvar::wait_until_internal (2 samples, 1.36%)</title><rect x="98.6395%" y="1125" width="1.3605%" height="15" fill="rgb(242,149,17)" fg:x="145" fg:w="2"/><text x="98.8895%" y="1135.50"></text></g><g><title>send_file`parking_lot_core::parking_lot::park (2 samples, 1.36%)</title><rect x="98.6395%" y="1109" width="1.3605%" height="15" fill="rgb(244,29,21)" fg:x="145" fg:w="2"/><text x="98.8895%" y="1119.50"></text></g><g><title>send_file`parking_lot_core::parking_lot::park::_{{closure}} (1 samples, 0.68%)</title><rect x="99.3197%" y="1093" width="0.6803%" height="15" fill="rgb(220,130,37)" fg:x="146" fg:w="1"/><text x="99.5697%" y="1103.50"></text></g><g><title>send_file`&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (1 samples, 0.68%)</title><rect x="99.3197%" y="1077" width="0.6803%" height="15" fill="rgb(211,67,2)" fg:x="146" fg:w="1"/><text x="99.5697%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.68%)</title><rect x="99.3197%" y="1061" width="0.6803%" height="15" fill="rgb(235,68,52)" fg:x="146" fg:w="1"/><text x="99.5697%" y="1071.50"></text></g></svg></svg>